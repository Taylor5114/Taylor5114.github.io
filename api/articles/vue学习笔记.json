{"title":"vue学习笔记","uid":"a6ae49244c61aefa5ffa97d9544305fe","slug":"vue学习笔记","date":"2021-11-07T08:06:12.000Z","updated":"2022-04-30T16:19:40.486Z","comments":true,"path":"api/articles/vue学习笔记.json","keywords":"無限進步","cover":null,"content":"<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h3 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"$nextTick\"></a>$nextTick</h3><p>作用：在下一次DOM更新结束后执行其指定的回调</p>\n<p>用法：常用于改变数据后，要基于更新后的DOM进行某些操作时，要在nextTick的回调中执行</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 语法\nthis.$nextTick(callback())</code></pre>\n\n<h3 id=\"路由生命周期钩子\"><a href=\"#路由生命周期钩子\" class=\"headerlink\" title=\"路由生命周期钩子\"></a>路由生命周期钩子</h3><h4 id=\"activated\"><a href=\"#activated\" class=\"headerlink\" title=\"activated\"></a>activated</h4><p>在路由组件被激活时调用（显示）</p>\n<h4 id=\"deactivated\"><a href=\"#deactivated\" class=\"headerlink\" title=\"deactivated\"></a>deactivated</h4><p>在路由组件失活时调用 （隐藏）</p>\n<h3 id=\"组件传值\"><a href=\"#组件传值\" class=\"headerlink\" title=\"组件传值\"></a>组件传值</h3><h5 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h5><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;tt-child :fun&#x3D;&quot;fun&quot; :obj&#x3D;&quot;obj&quot; :name&#x3D;&quot;name&quot; tips&#x3D;&quot;提示文字&quot;&gt;&lt;&#x2F;tt-child&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">data()&#123;\n  return&#123;\n    name: &#39;Taulor&#39;,\n    obj:&#123;\n\t\t\tage: 31,\n      sex: &#39;女&#39;\n    &#125;\n  &#125;\n&#125;,\nmethods:&#123;\n  fun()&#123;\n    console.log(&#39;fun()&#39;)\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 子组件\nprops:[&#39;fun&#39;,&#39;obj&#39;,&#39;name&#39;,&#39;tips&#39;]   &#x2F;&#x2F; 简写，不可以添加类型限制\nprops:&#123;                             &#x2F;&#x2F; 完整写法\n  fun: Function,  &#x2F;&#x2F; 限制类型\n  obj: &#123;\n\t\trequired: true  &#x2F;&#x2F; 限制必传\n  &#125;,\n  name:&#123;\n    type: String,\n    default: &#39;user name&#39;  &#x2F;&#x2F; 默认值\n  &#125;\n&#125;,\nmounted()&#123;\n  this.fun()  &#x2F;&#x2F; 调用父组件传的fun方法\n&#125;\n</code></pre>\n\n<h5 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h5><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--子组件--&gt;\n&lt;el-upload\n           name&#x3D;&#39;image&#39;\n           :action&#x3D;&#39;$store.state.host + &quot;&#x2F;business.php&#x2F;Common&#x2F;upload&quot;&#39;\n           :headers &#x3D; token\n           :on-success&#x3D;&quot;handleAvatarSuccess&quot;\n           &gt;\n  &lt;img v-if&#x3D;&quot;imageUrl&quot; :src&#x3D;&quot;imageUrl&quot; class&#x3D;&quot;avatar&quot; &#x2F;&gt;\n  &lt;i v-else class&#x3D;&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;&#x2F;i&gt;\n&lt;&#x2F;el-upload&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods: &#123;\n    handleAvatarSuccess(res, file) &#123;\n      this.imageUrl &#x3D; URL.createObjectURL(file.raw);\n      this.upload()\n    &#125;,\n    upload()&#123;\n       this.$emit(&#39;upload&#39;, this.imageUrl)\n    &#125;\n  &#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--父组件--&gt;\n&#x2F;&#x2F; 简写形式，适用于传单个参数，不需要在methods中定义函数\n&lt;imgUpload @upload&#x3D;&quot;(url) &#x3D;&gt; &#123;img &#x3D; url&#125;&quot;&gt;&lt;&#x2F;imgUpload&gt;\n&lt;imgUpload @upload&#x3D;&quot;upgood&quot;&gt;&lt;&#x2F;imgUpload&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods:&#123;\n  upgood(url)&#123;\n    this.img &#x3D; url\n  &#125;\n&#125;</code></pre>\n\n<h5 id=\"子传父-多参数\"><a href=\"#子传父-多参数\" class=\"headerlink\" title=\"子传父-多参数\"></a>子传父-多参数</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 子组件\nupload()&#123;\n  this.$emit(&#39;upload&#39;, this.imageUrl,1,2,3,4,5,6)\n&#125;\n&#x2F;&#x2F; 父组件\nupload(url,...params)&#123;\n  console.log(url,params)\n&#125;\n&#x2F;&#x2F; 输出为 &#39;url&#39; [1,2,3,4,5,6]</code></pre>\n\n<h5 id=\"ref传值\"><a href=\"#ref传值\" class=\"headerlink\" title=\"ref传值\"></a>ref传值</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 子组件\ndata()&#123;\n  return &#123;\n    name: &#39;Taylor&#39;\n  &#125;\n&#125;,\nmethods:&#123;\n  test()&#123;\n    this.$emit(&#39;test&#39;,this.name)\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--父组件--&gt;\n&lt;child ref&#x3D;&quot;tt&quot;&gt;&lt;&#x2F;child&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 推荐写法\nmethods:&#123;\n  getName(name)&#123;\n\t\tconsole.log(name)\n  &#125;\n&#125;,\nmounted()&#123;\n  this.$refs.child.$on(&quot;test&quot;,this.getName)\n&#125;\n&#x2F;&#x2F; 其他写法\nthis.$refs.child.$on(&quot;test&quot;,(name) &#x3D;&gt; &#123;\n  console.log(name)\n&#125;)</code></pre>\n\n<h3 id=\"组件原生事件\"><a href=\"#组件原生事件\" class=\"headerlink\" title=\"组件原生事件\"></a>组件原生事件</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--组件绑定原生事件需要添加 native 修饰符--&gt;\n&lt;child @click.native&#x3D;&quot;test&quot;&gt;&lt;&#x2F;child&gt;</code></pre>\n\n<h3 id=\"Router-link-传值的方法\"><a href=\"#Router-link-传值的方法\" class=\"headerlink\" title=\"Router-link 传值的方法\"></a>Router-link 传值的方法</h3><h4 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h4><p>接受方法同组件传值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; index.js\n&#123;\n  path: &#39;anime&#39;,\n  name: &#39;anime&#39;,\n  component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;study&#x2F;anime&#x2F;anime.vue&#39;),\n  &#x2F;&#x2F; props的第一种写法，值为对象，该对象 中所有key-value都会以props的形式传给anime组件\n  props: &#123;a:1,b:&#39;queen&#39;&#125;\n  &#x2F;&#x2F; props的第二种写法，值为布尔值，若为真，就会吧该路由组件收到的所有parmas参数，以props的形式传给anime组件\n  props: true\n  &#x2F;&#x2F; props的第三种写法，值为函数  可以传递query参数和parmas参数\n  props($route)&#123;\n    return &#123;id:$route.query.id,type:$route.query.type&#125;\n  &#125;\n&#125;,</code></pre>\n\n<h4 id=\"params\"><a href=\"#params\" class=\"headerlink\" title=\"params\"></a>params</h4><p>传值：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;router-link\n             :to&#x3D;&quot;&#123;name:&#39;shopnoticeInfo&#39;,params:&#123;id:item.id&#125;&#125;&quot;\n             v-for&#x3D;&quot;(item, index) in msg&quot;\n             :key&#x3D;&quot;index&quot;\n             &gt;\n  &lt;li class&#x3D;&quot;align-center between&quot;&gt;\n    &lt;p v-if&#x3D;&quot;item.title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;p&gt;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;router-link&gt;</code></pre>\n\n<p>使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;&#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;id&#x3D;&#39;+this.$route.params.id)</code></pre>\n\n<h4 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h4><p>传值：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;shopnoticeInfo&#39;,query:&#123;id:item.id&#125;&#125;&quot; v-for&#x3D;&quot;(item, index) in msg&quot; :key&#x3D;&quot;index&quot;&gt;\n    &lt;li class&#x3D;&quot;align-center between&quot;&gt;\n        &lt;p v-if&#x3D;&quot;item.title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;p&gt;\n    &lt;&#x2F;li&gt;\n&lt;&#x2F;router-link&gt;</code></pre>\n\n<p>使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;&#123;&#123;this.$route.query.id&#125;&#125;&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;id&#x3D;&#39;+this.$route.query.id)</code></pre>\n\n<h4 id=\"path-type\"><a href=\"#path-type\" class=\"headerlink\" title=\"path/:type\"></a>path/:type</h4><p>Router 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n    path: &quot;&#x2F;info&#x2F;:type&quot;,\n    name: &quot;info&quot;,\n    component: info\n&#125;</code></pre>\n\n<p>传值：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;router-link to&#x3D;&quot;&#x2F;info&#x2F;id&quot;&gt;&lt;&#x2F;router-link&gt;&#x2F;&lt;router-link :to&#x3D;&quot;&#39;&#x2F;info&#x2F;&#39;+name&quot;&gt;&lt;&#x2F;router-link&gt;\n&lt;script&gt;\n\texport default &#123;\n      name: &quot;info&quot;,\n      data() &#123;\n          return &#123;\n              name: &#39;taylor&#39;\n          &#125;;\n      &#125;\n  &#125;;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;&#123;&#123;this.$route.params.type&#125;&#125;&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(this.$route.params.type)</code></pre>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>​    params 参数不会显示在地址栏路径上，但是刷新页面传入的值会失效</p>\n<p>​    query 参数会显示在地址栏上，刷新页面不会消失</p>\n<h3 id=\"js路由转跳\"><a href=\"#js路由转跳\" class=\"headerlink\" title=\"js路由转跳\"></a>js路由转跳</h3><p>转跳到指定页面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.$router.push(&#123; path: &quot;.&#x2F;publishtask3&quot; &#125;);</code></pre>\n\n<p>返回上一页</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.$router.go(-1);</code></pre>\n\n<h3 id=\"缓存路由组件\"><a href=\"#缓存路由组件\" class=\"headerlink\" title=\"缓存路由组件\"></a>缓存路由组件</h3><p>该组件可以在路由切换时不销毁组件，用于保留用户输入内容</p>\n<p>include属性可指定要缓存的组件（组件名），不设置则缓存所有子组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;keep-alive include&#x3D;&quot;vue&quot;&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;keep-alive&gt;\n&lt;!--缓存多个--&gt;\n&lt;keep-alive :include&#x3D;&quot;[&#39;vue&#39;,&#39;anime&#39;]&quot;&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;keep-alive&gt;</code></pre>\n\n<h3 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 全局前置路由守卫  初始化&amp;每次切换前被调用\nrouter.beforeEach((to, from, next) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; console.log(to, from)\n    &#x2F;&#x2F; console.log(router)\n    if (to.name &#x3D;&#x3D; &#39;vue&#39;) &#123;   &#x2F;&#x2F; name为路由中配置的name\n        if (router.app.$options.store.state.name &#x3D;&#x3D; &#39;raver&#39;) &#123;\n            next()\n        &#125;else&#123;\n            ElementUI.Message(&#39;你没有权限&#39;)\n        &#125;\n    &#125;else&#123;\n        next()\n    &#125;\n\n&#125;)\n&#x2F;*------------------------------------------------------*&#x2F;\n&#x2F;&#x2F; 也可在路由配置中配置meta决定是否校验，适合多组件\n&#123;\n  path: &#39;vue&#39;,\n  name: &#39;vue&#39;,\n  component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;study&#x2F;vue&#x2F;index.vue&#39;),\n  meta: &#123;isAuth: true&#125;\n&#125;\n&#x2F;&#x2F; -----\nrouter.beforeEach((to, from, next) &#x3D;&gt; &#123;\n    if (to.meta.isAuth) &#123;   &#x2F;&#x2F; name为路由中配置的meta参数\n        if (router.app.$options.store.state.name &#x3D;&#x3D; &#39;raver&#39;) &#123;\n            next()\n        &#125;else&#123;\n            ElementUI.Message(&#39;你没有权限&#39;)\n        &#125;\n    &#125;else&#123;\n        next()\n    &#125;\n\n&#125;)\n  \n&#x2F;*-----------------------------------------------------------*&#x2F;\n&#x2F;&#x2F; 全局后置守卫路由\n&#x2F;&#x2F; 全局后置路由守卫  初始化&amp;每次切换后被调用\nrouter.afterEach( (to,from) &#x3D;&gt; &#123;\n  \t&#x2F;&#x2F; 可以在meta中配置标签信息，在切换是修改页面标签\n    document.title &#x3D; to.meta.title || &#39;hello-Vue&#39;\n    \n&#125;)\n&#x2F;&#x2F; 独享路由守卫\n&#123;\n  path: &#39;&#x2F;&#39;,\n  name: &#39;study&#39;,\n  component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;study&#x2F;index.vue&#39;),\n  meta: &#123;isAuth: false,title:&#39;study&#39;&#125;,\n  beforeEnter: (to, from, next) &#x3D;&gt; &#123;\n    if (router.app.$options.store.state.name &#x3D;&#x3D; &#39;raver&#39;) &#123;\n      next()\n    &#125;else&#123;\n      Message(&#39;你没有权限&#39;)\n    &#125;\n  &#125;\n&#125;,</code></pre>\n\n<h4 id=\"组件内路由守卫\"><a href=\"#组件内路由守卫\" class=\"headerlink\" title=\"组件内路由守卫\"></a>组件内路由守卫</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  name: &quot;github&quot;,\n  data() &#123;\n    return &#123;&#125;;\n  &#125;,\n  &#x2F;&#x2F; 通过路由规则进入该组件时被调用\n  beforeRouteEnter(to, from, next)&#123;\n    next() \n  &#125;,\n  &#x2F;&#x2F; 通过路由规则离开该组件时被调用\n  beforeRouteLeave(to, from, next) &#123;\n    next()\n  &#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"侦听-watch\"><a href=\"#侦听-watch\" class=\"headerlink\" title=\"侦听 watch\"></a>侦听 watch</h3><p>侦听数组增加减少</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 简写形式\nwatch: &#123; \n    value(newvalue,oldvalue) &#123; \n        console.log(this.value) \n    &#125; \n&#125;</code></pre>\n\n<p>深度侦听</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">侦听data()&#123;\n  return&#123;\n    name: &#39;Queen&#39;,\n    address: &#39;now&#39;,\n    nums:&#123;\n      a: 1,\n      b: 2,\n    &#125;\n  &#125;\n&#125;,\nwatch: &#123;\n  &#x2F;&#x2F; \t需求：只侦听a不侦听b\n  &#x2F;&#x2F; 写法如下 \n    &#39;nums.a&#39;: &#123;  &#x2F;&#x2F; watch的key实质上是字符串，习惯写法其实是简写形式\n      \timmediate: true,  &#x2F;&#x2F; 初始化时让handler调用一下\n        handler() &#123;\n            console.log(this.value)\n        &#125;,\n        deep: true   \n    &#125;\n&#125;</code></pre>\n\n<p>深度侦听（侦听对象/数组内部参数）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch: &#123;\n  &#x2F;&#x2F; 需求：侦听数组&#x2F;对象下所有变化\n  &#x2F;&#x2F; 方法如下\n    value: &#123;\n        handler() &#123;\n            console.log(this.value)\n        &#125;,\n        deep: true   &#x2F;&#x2F; 开启深度侦听\n    &#125;\n&#125;</code></pre>\n\n<p>方法写在methods中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch:&#123;  \n    value: &#39;test&#39;\n&#125;,\nmethods:&#123;  \n    test()&#123; \n        console.log(this.value)  \n    &#125;\n&#125;</code></pre>\n\n<p>拓展写法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var vm &#x3D; new Vue(&#123;\n  el:&quot;#app&quot;,\n  data()&#123;\n    return&#123;\n      name: &#39;Queen&#39;,\n      address: &#39;now&#39;\n    &#125;\n  &#125;,\n  watch:&#123;\n\n  &#125;\n&#125;);\n\nvm.$watch(&quot;name&quot;,&#123;\n  immediate: true,  &#x2F;&#x2F; 初始化时让handler调用一下\n  handler(newvalue,oldvalue) &#123;\n    console.log(this.name)\n    console.log(&#39;新值&#39;,newvalue,&#39;旧值&#39;,oldvalue)\n  &#125;,\n  deep: true   \n&#125;);\nvm.$watch(&quot;address&quot;,function(newvalue,oldvalue)&#123;\n  console.log(&#39;新值&#39;,newvalue,&#39;旧值&#39;,oldvalue)\n&#125;)</code></pre>\n\n<h3 id=\"key的原理-截屏2021-10-27-上午11-14-08-Users-raver-hexo-source-posts-截屏2021-10-27-上午11-14-08-png\"><a href=\"#key的原理-截屏2021-10-27-上午11-14-08-Users-raver-hexo-source-posts-截屏2021-10-27-上午11-14-08-png\" class=\"headerlink\" title=\"key的原理 ![截屏2021-10-27 上午11.14.08](/Users/raver/hexo/source/_posts/截屏2021-10-27 上午11.14.08.png)\"></a>key的原理 ![截屏2021-10-27 上午11.14.08](/Users/raver/hexo/source/_posts/截屏2021-10-27 上午11.14.08.png)</h3><p>![截屏2021-10-27 上午11.22.10](/Users/raver/hexo/source/_posts/截屏2021-10-27 上午11.22.10.png)</p>\n<h3 id=\"全局事件总线\"><a href=\"#全局事件总线\" class=\"headerlink\" title=\"全局事件总线\"></a>全局事件总线</h3><p>通过全局事件总线可以实现任意组件之间的通信，</p>\n<p>使用方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\nnew Vue(&#123;\n  router,\n  render: h &#x3D;&gt; h(App),\n  beforeCreate()&#123;\n    Vue.prototype.$bus &#x3D; this  &#x2F;&#x2F; 安装全局事件总线 (实质上是定义一个公共组件，通过自定义事件来实现通信)\n  &#125;\n&#125;).$mount(&#39;#app&#39;)\n\n&#x2F;&#x2F; 组件a\nmounted () &#123;\n  this.$bus.$on(&#39;checkTodo&#39;,this.checkTodo)\n&#125;,\nbeforeDestroy () &#123;\n  this.$bus.$off(&#39;checkTodo&#39;)  \n&#125;,\nmethods:&#123;\n  checkTodo(id)&#123;\n    this.id &#x3D; id\n  &#125;\n&#125;\n&#x2F;&#x2F; 组件b\nwatch: &#123;\n  checked() &#123;\n    this.$bus.$emit(&#39;checkTodo&#39;,this.data.id)\n  &#125;,\n&#125;,</code></pre>\n\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入 mixin\"></a>混入 mixin</h3><p>功能：可以把多个组件公用的配置提取成一个混入对象</p>\n<p>使用方式：</p>\n<p>创建 mixin.js 文件名随意</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 定义混入\nexport const mixin &#x3D; &#123;\n  data()&#123;&#125;,\n  mounted()&#123;&#125;,\n  methods:&#123;\n\t\ttest()&#123;\n      this.$message.success(&quot;test...&quot;)\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>全局使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\nimport &#123;mixin&#125; from .&#x2F;mixin.js\nVue.mixin(mixin)\n\n&#x2F;&#x2F; 组件\nmounted()&#123;\n  this.test()\n&#125;,\nmethods:&#123;\n  showMsg()&#123;\n    this.test()\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--组件--&gt;\n&lt;button @click&#x3D;&quot;test()&quot;&gt;测试&lt;&#x2F;button&gt;</code></pre>\n\n<p>局部使用 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; mixin &#125; from &quot;.&#x2F;mixin&quot;;\nexport default &#123;\n  name: &quot;ts1&quot;,\n  data() &#123;\n    return &#123;&#125;;\n  &#125;,\n  mixins: [mixin],\n&#125;;\n&#x2F;&#x2F; 使用方法同全局混入</code></pre>\n\n<h3 id=\"Vue-插件\"><a href=\"#Vue-插件\" class=\"headerlink\" title=\"Vue 插件\"></a>Vue 插件</h3><p>在src下创建plugin.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\n&#x2F;&#x2F; 引入插件\nimport plugins from &#39;.&#x2F;plugins&#39;\n&#x2F;&#x2F; 使用插件\nVue.use(plugins)\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; plugin.js\nelxport default &#123;\n\tinstall(Vue)&#123;\n    \t\t&#x2F;&#x2F; 定义全局过滤器\n        Vue.filter(&#39;mySlice&#39;, function (val) &#123;\n            return val.slice(0, 4)\n        &#125;)\n        &#x2F;&#x2F; 定义全局指令\n        Vue.directive(&#39;big&#39;, function (element, binding) &#123;\n            element.innerText &#x3D; binding.value * 10\n        &#125;)\n        &#x2F;&#x2F; 定义混入\n        Vue.mixin(&#123;\n            methods: &#123;\n                mixintt() &#123;\n                    this.$message.success(&#39;全局混入&#39;)\n                &#125;\n            &#125;\n        &#125;)\n        &#x2F;&#x2F; 给Vue原型上添加一个方法（vm、vc就都可以调用了）\n        Vue.prototype.$hello &#x3D; () &#x3D;&gt; &#123;\n            console.log(&#39;hello&#39;)\n        &#125;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>插槽内元素与样式既可以写在子组件也可以写在父组件</p>\n<ul>\n<li>默认插槽</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--子组件 tt--&gt;\n&lt;template&gt;\n\t&lt;div&gt;标题&lt;&#x2F;div&gt;\n  &lt;slot&gt;默认值&lt;&#x2F;slot&gt;\n&lt;&#x2F;template&gt;\n&lt;!--父组件--&gt;\n&lt;tt&gt;\n\t&lt;p&gt;测试参数值&lt;&#x2F;p&gt;\n&lt;&#x2F;tt&gt;</code></pre>\n\n<ul>\n<li>具名插槽</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--子组件 tt--&gt;\n&lt;template&gt;\n\t&lt;div&gt;标题&lt;&#x2F;div&gt;\n  &lt;slot name&#x3D;&quot;a&quot;&gt;默认值a&lt;&#x2F;slot&gt;\n  &lt;slot name&#x3D;&quot;b&quot;&gt;默认值b&lt;&#x2F;slot&gt;\n&lt;&#x2F;template&gt;\n&lt;!--父组件--&gt;\n&lt;tt&gt;\n\t&lt;p slot&#x3D;&quot;a&quot;&gt;测试参数值a1&lt;&#x2F;p&gt;\n  &lt;p slot&#x3D;&quot;a&quot;&gt;测试参数值a2&lt;&#x2F;p&gt;\n  &lt;ul slot&#x3D;&quot;a&quot;&gt;\n    &lt;li v-for&#x3D;&quot;item in 3&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;raver&lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n\t&lt;template v-slot:b&gt;\n  \t&lt;p&gt;测试参数值b1&lt;&#x2F;p&gt;\n    &lt;p&gt;测试参数值b2&lt;&#x2F;p&gt;\n    &lt;ul&gt;\n      &lt;li v-for&#x3D;&quot;item in 3&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;raver&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;tt&gt;</code></pre>\n\n<ul>\n<li>作用域插槽</li>\n</ul>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--子组件--&gt;\n&lt;template&gt;\n\t&lt;div&gt;标题&lt;&#x2F;div&gt;\n  &lt;slot :tt&#x3D;&quot;obj&quot; ts&#x3D;&quot;taylor&quot;&lt;&#x2F;slot&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\n\t\texport default&#123;\n\t\t\tdata()&#123;\n      \treturn&#123;\n\t\t\t\t\tobj:[&#39;taylor&#39;,&#39;raver&#39;,&#39;tim&#39;,&#39;avicii&#39;]\n        &#125;\n    \t&#125;\n    &#125;\n&lt;&#x2F;script&gt;\n\n&lt;!--父组件--&gt;\n&lt;tt&gt;\n\t&lt;template scope&#x3D;&quot;data&quot;&gt;\n    &lt;p&gt;&#123;&#123;data.ts&#125;&#125;&lt;&#x2F;p&gt;\n\t\t&lt;ul&gt;\n       &lt;li v-for&#x3D;&quot;item in data.obj&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;tt&gt;\n&lt;!--es6--&gt;\n&lt;tt&gt;\n\t&lt;template scope&#x3D;&quot;&#123;obj,ts&#125;&quot;&gt;\n    &lt;p&gt;&#123;&#123;ts&#125;&#125;&lt;&#x2F;p&gt;\n\t\t&lt;ul&gt;\n       &lt;li v-for&#x3D;&quot;item in obj&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;li&gt;\n    &lt;&#x2F;ul&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;tt&gt;</code></pre>\n\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><ul>\n<li>创建store/index.js</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; index.js\nimport Vue from &#39;vue&#39;\nimport Vuex from &#39;vuex&#39;\nVue.use(Vuex)\nconst actions &#x3D; &#123;&#125;\nconst mutations &#x3D; &#123;&#125;\nconst state &#x3D; &#123;\n  \n&#125;\nexport default new Vuex(&#123;\n  actions,\n  mutations,\n  state,\n&#125;)\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\nimport store from &#39;.&#x2F;store&#39;\n\nnew Vue(&#123;\n  el:&#39;#app&#39;,\n  render: h &#x3D;&gt; h(App),\n  store\n&#125;)</code></pre>\n\n\n\n\n\n","text":"基础$nextTick作用：在下一次DOM更新结束后执行其指定的回调 用法：常用于改变数据后，要基于更新后的DOM进行某些操作时，要在nextTick的回调中执行 &#x2F;&#x2F; 语法 this.$nextTick(callback()) 路由生命周期钩子activat...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"vue","slug":"vue","count":1,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nextTick\"><span class=\"toc-text\">$nextTick</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">路由生命周期钩子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#activated\"><span class=\"toc-text\">activated</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#deactivated\"><span class=\"toc-text\">deactivated</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">组件传值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%88%B6%E4%BC%A0%E5%AD%90\"><span class=\"toc-text\">父传子</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%90%E4%BC%A0%E7%88%B6\"><span class=\"toc-text\">子传父</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%90%E4%BC%A0%E7%88%B6-%E5%A4%9A%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">子传父-多参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ref%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">ref传值</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">组件原生事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Router-link-%E4%BC%A0%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Router-link 传值的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#props\"><span class=\"toc-text\">props</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#params\"><span class=\"toc-text\">params</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#query\"><span class=\"toc-text\">query</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#path-type\"><span class=\"toc-text\">path&#x2F;:type</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#js%E8%B7%AF%E7%94%B1%E8%BD%AC%E8%B7%B3\"><span class=\"toc-text\">js路由转跳</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">缓存路由组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">路由守卫</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%86%85%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB\"><span class=\"toc-text\">组件内路由守卫</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%A6%E5%90%AC-watch\"><span class=\"toc-text\">侦听 watch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#key%E7%9A%84%E5%8E%9F%E7%90%86-%E6%88%AA%E5%B1%8F2021-10-27-%E4%B8%8A%E5%8D%8811-14-08-Users-raver-hexo-source-posts-%E6%88%AA%E5%B1%8F2021-10-27-%E4%B8%8A%E5%8D%8811-14-08-png\"><span class=\"toc-text\">key的原理 ![截屏2021-10-27 上午11.14.08](&#x2F;Users&#x2F;raver&#x2F;hexo&#x2F;source&#x2F;_posts&#x2F;截屏2021-10-27 上午11.14.08.png)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">全局事件总线</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%85%A5-mixin\"><span class=\"toc-text\">混入 mixin</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">Vue 插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">插槽</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vuex\"><span class=\"toc-text\">Vuex</span></a></li></ol></li></ol></li></ol>","author":{"name":"Raver233","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"無限進步","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Vue3","uid":"3a4eda1192ec992162144e15ab7e2ec5","slug":"Vue3","date":"2021-11-21T08:29:09.000Z","updated":"2022-04-14T14:43:34.667Z","comments":true,"path":"api/articles/Vue3.json","keywords":"無限進步","cover":[],"text":"常用的Compositon APIsetup函数 理解：vue3.0中一个新的配置项，值为一个函数 setup执行的时机 在beforeCreate之前执行一次，this是undefined setup的参数 props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"vue vue3","slug":"vue-vue3","count":1,"path":"api/tags/vue-vue3.json"}],"author":{"name":"Raver233","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"無限進步","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Vue-cli4","date":"2021-10-30T06:16:51.355Z","updated":"2022-01-17T10:01:54.113Z","comments":true,"path":"api/articles/Vue-cli4.json","keywords":"無限進步","cover":null,"text":"pubsub.js消息订阅插件, 功能与全局事件总线相同 npm install pubsub-js &#x2F;&#x2F; 在需要使用的组件中引入 import pubsub from &#39;pubsub-js&#39; &#x2F;&#x2F; 全局引入 main.js...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Raver233","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"無限進步","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}