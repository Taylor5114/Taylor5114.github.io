{"title":"Vue","uid":"5f258f833478a2a0e21ce42d19305683","slug":"Vue","date":"2021-09-13T09:22:00.000Z","updated":"2021-11-18T01:11:36.568Z","comments":true,"path":"api/articles/Vue.json","keywords":"無限進步","cover":null,"content":"<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><h3 id=\"组件传值\"><a href=\"#组件传值\" class=\"headerlink\" title=\"组件传值\"></a>组件传值</h3><h4 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h4><p>子组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;el-upload\n           name&#x3D;&#39;image&#39;\n           :action&#x3D;&#39;$store.state.host + &quot;&#x2F;business.php&#x2F;Common&#x2F;upload&quot;&#39;\n           :headers &#x3D; token\n           :on-success&#x3D;&quot;handleAvatarSuccess&quot;\n           &gt;\n  &lt;img v-if&#x3D;&quot;imageUrl&quot; :src&#x3D;&quot;imageUrl&quot; class&#x3D;&quot;avatar&quot; &#x2F;&gt;\n  &lt;i v-else class&#x3D;&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;&#x2F;i&gt;\n&lt;&#x2F;el-upload&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods: &#123;\n    handleAvatarSuccess(res, file) &#123;\n      this.imageUrl &#x3D; URL.createObjectURL(file.raw);\n      this.upload()\n    &#125;,\n    upload()&#123;\n       this.$emit(&#39;upload&#39;, this.imageUrl)\n    &#125;\n  &#125;</code></pre>\n\n<p>父组件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import imageUpload from &#39;@&#x2F;components&#x2F;ImageUpload&#x2F;index.vue&#39;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;imgUpload @upload&#x3D;&quot;upgood&quot;&gt;&lt;&#x2F;imgUpload&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">methods:&#123;\n  upgood(url)&#123;\n    this.img &#x3D; url\n  &#125;\n&#125;</code></pre>\n\n<p>子传父-多参数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 子组件\nupload()&#123;\n  this.$emit(&#39;upload&#39;, this.imageUrl,1,2,3,4,5,6)\n&#125;\n&#x2F;&#x2F; 父组件\nupload(url,...params)&#123;\n  console.log(url,params)\n&#125;\n&#x2F;&#x2F; 输出。 &#39;url&#39; [1,2,3,4,5,6]</code></pre>\n\n<h5 id=\"ref传值\"><a href=\"#ref传值\" class=\"headerlink\" title=\"ref传值\"></a>ref传值</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 子组件\ndata()&#123;\n  return &#123;\n    name: &#39;Taylor&#39;\n  &#125;\n&#125;,\nmethods:&#123;\n  test()&#123;\n    this.$emit(&#39;test&#39;,this.name)\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--父组件--&gt;\n&lt;child ref&#x3D;&quot;tt&quot;&gt;&lt;&#x2F;child&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 推荐写法\nmethods:&#123;\n  getName(name)&#123;\n\t\tconsole.log(name)\n  &#125;\n&#125;,\nmounted()&#123;\n  this.$refs.child.$on(&quot;test&quot;,this.getName)\n&#125;\n&#x2F;&#x2F; 其他写法\nthis.$refs.child.$on(&quot;test&quot;,(name) &#x3D;&gt; &#123;\n  console.log(name)\n&#125;)</code></pre>\n\n<h3 id=\"组件原生事件\"><a href=\"#组件原生事件\" class=\"headerlink\" title=\"组件原生事件\"></a>组件原生事件</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--组件绑定原生事件需要添加 native 修饰符--&gt;\n&lt;child @click.native&#x3D;&quot;test&quot;&gt;&lt;&#x2F;child&gt;</code></pre>\n\n<h3 id=\"全局事件总线\"><a href=\"#全局事件总线\" class=\"headerlink\" title=\"全局事件总线\"></a>全局事件总线</h3><p>任意组件间通信</p>\n<h3 id=\"Router-link-传值的方法\"><a href=\"#Router-link-传值的方法\" class=\"headerlink\" title=\"Router-link 传值的方法\"></a>Router-link 传值的方法</h3><h4 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h4><p>接受方法同组件传值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; index.js\n&#123;\n  path: &#39;anime&#39;,\n  name: &#39;anime&#39;,\n  component: () &#x3D;&gt; import(&#39;..&#x2F;views&#x2F;study&#x2F;anime&#x2F;anime.vue&#39;),\n  &#x2F;&#x2F; props的第一种写法，值为对象，该对象 中所有key-value都会以props的形式传给anime组件\n  props: &#123;a:1,b:&#39;queen&#39;&#125;\n  &#x2F;&#x2F; props的第二种写法，值为布尔值，若为真，就会吧该路由组件收到的所有parmas参数，以props的形式传给anime组件\n  props: true\n  &#x2F;&#x2F; props的第三种写法，值为函数  可以传递query参数和parmas参数\n  props($route)&#123;\n    return &#123;id:$route.query.id,type:$route.query.type&#125;\n  &#125;\n&#125;,</code></pre>\n\n\n\n<h4 id=\"params\"><a href=\"#params\" class=\"headerlink\" title=\"params\"></a>params</h4><p>传值：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;router-link\n             :to&#x3D;&quot;&#123;name:&#39;shopnoticeInfo&#39;,params:&#123;id:item.id&#125;&#125;&quot;\n             v-for&#x3D;&quot;(item, index) in msg&quot;\n             :key&#x3D;&quot;index&quot;\n             &gt;\n  &lt;li class&#x3D;&quot;align-center between&quot;&gt;\n    &lt;p v-if&#x3D;&quot;item.title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;p&gt;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;router-link&gt;</code></pre>\n\n\n\n<p>使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;&#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;id&#x3D;&#39;+this.$route.params.id)</code></pre>\n\n<h4 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h4><p>传值：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;shopnoticeInfo&#39;,query:&#123;id:item.id&#125;&#125;&quot; v-for&#x3D;&quot;(item, index) in msg&quot; :key&#x3D;&quot;index&quot;&gt;\n    &lt;li class&#x3D;&quot;align-center between&quot;&gt;\n        &lt;p v-if&#x3D;&quot;item.title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;p&gt;\n    &lt;&#x2F;li&gt;\n&lt;&#x2F;router-link&gt;</code></pre>\n\n<p>使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;&#123;&#123;this.$route.query.id&#125;&#125;&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;id&#x3D;&#39;+this.$route.query.id)</code></pre>\n\n<h4 id=\"path-type\"><a href=\"#path-type\" class=\"headerlink\" title=\"path/:type\"></a>path/:type</h4><p>Router 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n    path: &quot;&#x2F;info&#x2F;:type&quot;,\n    name: &quot;info&quot;,\n    component: info\n&#125;</code></pre>\n\n<p>传值：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;router-link to&#x3D;&quot;&#x2F;info&#x2F;id&quot;&gt;&lt;&#x2F;router-link&gt;&#x2F;&lt;router-link :to&#x3D;&quot;&#39;&#x2F;info&#x2F;&#39;+name&quot;&gt;&lt;&#x2F;router-link&gt;\n&lt;script&gt;\n\texport default &#123;\n      name: &quot;info&quot;,\n      data() &#123;\n          return &#123;\n              name: &#39;taylor&#39;\n          &#125;;\n      &#125;\n  &#125;;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;h1&gt;&#123;&#123;this.$route.params.type&#125;&#125;&lt;&#x2F;h1&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(this.$route.params.type)</code></pre>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>​    params 参数不会显示在地址栏路径上，但是刷新页面传入的值会失效</p>\n<p>​    query 参数会显示在地址栏上，刷新页面不会消失</p>\n<h3 id=\"js路由转跳\"><a href=\"#js路由转跳\" class=\"headerlink\" title=\"js路由转跳\"></a>js路由转跳</h3><p>转跳到指定页面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.$router.push(&#123; path: &quot;.&#x2F;publishtask3&quot; &#125;);</code></pre>\n\n<p>返回上一页</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">this.$router.go(-1);</code></pre>\n\n<h3 id=\"缓存路由组件\"><a href=\"#缓存路由组件\" class=\"headerlink\" title=\"缓存路由组件\"></a>缓存路由组件</h3><p>该组件可以在路由切换时不销毁组件，用于保留用户输入内容</p>\n<p>include属性可指定要缓存的组件（组件名），不设置则缓存所有子组件</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;keep-alive include&#x3D;&quot;vue&quot;&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;keep-alive&gt;\n&lt;!--缓存多个--&gt;\n&lt;keep-alive :include&#x3D;&quot;[&#39;vue&#39;,&#39;anime&#39;]&quot;&gt;\n  &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n&lt;&#x2F;keep-alive&gt;</code></pre>\n\n\n\n<h3 id=\"侦听-watch\"><a href=\"#侦听-watch\" class=\"headerlink\" title=\"侦听 watch\"></a>侦听 watch</h3><p>侦听数组增加减少</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 简写形式\nwatch: &#123; \n    value(newvalue,oldvalue) &#123; \n        console.log(this.value) \n    &#125; \n&#125;</code></pre>\n\n<p>深度侦听</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">侦听data()&#123;\n  return&#123;\n    name: &#39;Queen&#39;,\n    address: &#39;now&#39;,\n    nums:&#123;\n      a: 1,\n      b: 2,\n    &#125;\n  &#125;\n&#125;,\nwatch: &#123;\n  &#x2F;&#x2F; \t需求：只侦听a不侦听b\n  &#x2F;&#x2F; 写法如下 \n    &#39;nums.a&#39;: &#123;  &#x2F;&#x2F; watch的key实质上是字符串，习惯写法其实是简写形式\n      \timmediate: true,  &#x2F;&#x2F; 初始化时让handler调用一下\n        handler() &#123;\n            console.log(this.value)\n        &#125;,\n        deep: true   \n    &#125;\n&#125;</code></pre>\n\n<p>深度侦听（侦听对象/数组内部参数）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch: &#123;\n  &#x2F;&#x2F; 需求：侦听数组&#x2F;对象下所有变化\n  &#x2F;&#x2F; 方法如下\n    value: &#123;\n        handler() &#123;\n            console.log(this.value)\n        &#125;,\n        deep: true   &#x2F;&#x2F; 开启深度侦听\n    &#125;\n&#125;</code></pre>\n\n<p>方法写在methods中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">watch:&#123;  \n    value: &#39;test&#39;\n&#125;,\nmethods:&#123;  \n    test()&#123; \n        console.log(this.value)  \n    &#125;\n&#125;</code></pre>\n\n<p>拓展写法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var vm &#x3D; new Vue(&#123;\n  el:&quot;#app&quot;,\n  data()&#123;\n    return&#123;\n      name: &#39;Queen&#39;,\n      address: &#39;now&#39;\n    &#125;\n  &#125;,\n  watch:&#123;\n\n  &#125;\n&#125;);\n\nvm.$watch(&quot;name&quot;,&#123;\n  immediate: true,  &#x2F;&#x2F; 初始化时让handler调用一下\n  handler(newvalue,oldvalue) &#123;\n    console.log(this.name)\n    console.log(&#39;新值&#39;,newvalue,&#39;旧值&#39;,oldvalue)\n  &#125;,\n  deep: true   \n&#125;);\nvm.$watch(&quot;address&quot;,function(newvalue,oldvalue)&#123;\n  console.log(&#39;新值&#39;,newvalue,&#39;旧值&#39;,oldvalue)\n&#125;)</code></pre>\n\n<h3 id=\"key的原理\"><a href=\"#key的原理\" class=\"headerlink\" title=\"key的原理\"></a>key的原理</h3><p> ![截屏2021-10-27 上午11.14.08](/Users/raver/hexo/source/_posts/截屏2021-10-27 上午11.14.08.png)</p>\n<p>![截屏2021-10-27 上午11.22.10](/Users/raver/hexo/source/_posts/截屏2021-10-27 上午11.22.10.png)</p>\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入 mixin\"></a>混入 mixin</h3><p>功能：可以把多个组件公用的配置提取成一个混入对象</p>\n<p>使用方式：</p>\n<p>创建 mixin.js 文件名随意</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 定义混入\nexport const mixin &#x3D; &#123;\n  data()&#123;&#125;,\n  mounted()&#123;&#125;,\n  method:&#123;\n\t\ttest()&#123;\n      this.$message.success(&quot;test...&quot;)\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>全局使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\nimport mixin from .&#x2F;mixin.js\nVue.mixin(mixin)\n\n&#x2F;&#x2F; 组件\nmounted()&#123;\n  this.test()\n&#125;,\nmethods:&#123;\n  showMsg()&#123;\n    this.test()\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!--组件--&gt;\n&lt;button @click&#x3D;&quot;test()&quot;&gt;测试&lt;&#x2F;button&gt;</code></pre>\n\n<p>局部使用 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; test &#125; from &quot;.&#x2F;mixin&quot;;\nexport default &#123;\n  name: &quot;ts1&quot;,\n  data() &#123;\n    return &#123;&#125;;\n  &#125;,\n  mixins: [test],\n&#125;;Ï\n&#x2F;&#x2F; 使用方法同全局混入</code></pre>\n\n<h3 id=\"Vue-插件\"><a href=\"#Vue-插件\" class=\"headerlink\" title=\"Vue 插件\"></a>Vue 插件</h3><p>在src下创建plugin.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; main.js\n&#x2F;&#x2F; 引入插件\nimport plugins from &#39;.&#x2F;plugins&#39;\n&#x2F;&#x2F; 使用插件\nVue.use(plugins)\n</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; plugin.js\nelxport default &#123;\n\tinstall(Vue)&#123;\n    &#x2F;&#x2F; 定义全局过滤器\n        Vue.filter(&#39;mySlice&#39;, function (val) &#123;\n            return val.slice(0, 4)\n        &#125;)\n        &#x2F;&#x2F; 定义全局指令\n        Vue.directive(&#39;big&#39;, function (element, binding) &#123;\n            element.innerText &#x3D; binding.value * 10\n        &#125;)\n        &#x2F;&#x2F; 定义混入\n        Vue.mixin(&#123;\n            methods: &#123;\n                mixintt() &#123;\n                    this.$message.success(&#39;全局混入&#39;)\n                &#125;\n            &#125;\n        &#125;)\n        &#x2F;&#x2F; 给Vue原型上添加一个方法（vm、vc就都可以调用了）\n        Vue.prototype.$hello &#x3D; () &#x3D;&gt; &#123;\n            console.log(&#39;hello&#39;)\n        &#125;\n  &#125;\n&#125;</code></pre>\n\n","text":"Webpack组件传值子传父子组件 &lt;el-upload name&#x3D;&#39;image&#39; :action&#x3D;&#39;$store.state.host + &quot;&#x2F;business.php&#x2F;Common&#x2F;up...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Webpack\"><span class=\"toc-text\">Webpack</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">组件传值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%90%E4%BC%A0%E7%88%B6\"><span class=\"toc-text\">子传父</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ref%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">ref传值</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">组件原生事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF\"><span class=\"toc-text\">全局事件总线</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Router-link-%E4%BC%A0%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Router-link 传值的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#props\"><span class=\"toc-text\">props</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#params\"><span class=\"toc-text\">params</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#query\"><span class=\"toc-text\">query</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#path-type\"><span class=\"toc-text\">path&#x2F;:type</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#js%E8%B7%AF%E7%94%B1%E8%BD%AC%E8%B7%B3\"><span class=\"toc-text\">js路由转跳</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">缓存路由组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%A6%E5%90%AC-watch\"><span class=\"toc-text\">侦听 watch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#key%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">key的原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%85%A5-mixin\"><span class=\"toc-text\">混入 mixin</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">Vue 插件</span></a></li></ol></li></ol>","author":{"name":"Raver233","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"無限進步","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"HTML&CSS","uid":"973e5dd0cbccced2b85e4e98cb5c34f7","slug":"HTML-CSS","date":"2021-09-25T02:53:05.000Z","updated":"2021-09-25T02:58:00.090Z","comments":true,"path":"api/articles/HTML-CSS.json","keywords":"無限進步","cover":null,"text":"Input自定义样式 &#x2F;* 自定义input样式 *&#x2F; input::-webkit-input-placeholder &#123; &#x2F;* WebKit browsers *&#x2F; color: #fff; font-size: 18px; ...","link":"","photos":[],"count_time":{"symbolsCount":740,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Raver233","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"無限進步","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Git","date":"2021-09-07T11:00:50.909Z","updated":"2021-09-08T00:24:49.337Z","comments":true,"path":"api/articles/Git.json","keywords":"無限進步","cover":null,"text":"git init git add . git commit -m&#39;tt&#39; git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;Taylor5114&#x2F;code.git git push --set-...","link":"","photos":[],"count_time":{"symbolsCount":164,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Raver233","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"無限進步","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}